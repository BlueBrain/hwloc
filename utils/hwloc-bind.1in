.\" -*- nroff -*-
.\" Copyright Â© 2009 Cisco Systems, Inc.  All rights reserved.
.TH HWLOC-BIND "1" "#HWLOC_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
hwloc-bind \- Launch a command that is bound to specific processors
and/or memory.
.
.\" **************************
.\"    Synopsis Section
.\" **************************
.SH SYNOPSIS
.
.B hwloc-bind
[\fIoptions\fR] \fI<location1> [<location2> [...] ] [--] <command> \fR...
.
.\" **************************
.\"    Options Section
.\" **************************
.SH OPTIONS
.
See below for a description of valid <location> formats.
.TP 10
\fB\-\-get\fR
Report the current bindings.
.TP
\fB\-\-single\fR
Bind on a single CPU to prevent migration.
.TP
\fB\-\-strict\fR
Require strict binding.
.TP
\fB\-p\fR \fB\-\-physical\fR
display OS/physical indexes instead of logical indexes
.TP
\fB\-l\fR \fB\-\-logical\fR
display logical indexes instead of physical/OS indexes (default)
.TP
\fB\-v\fR
Verbose output.
.TP
\fB\-\-version\fR
Report version and exit.
.
.\" **************************
.\"    Description Section
.\" **************************
.SH DESCRIPTION
.
hwloc-bind execs an executable (with optional command line arguments)
that is bound to the specified location (or list of locations).  Upon
successful execution, hwloc-bind simply sets bindings and then execs
the executable over itself.
.
.
.SS Definitions
Hwloc has some specific definitions for terms that are used in this
man page and other hwloc documentation.
.
.TP 5
.B Hwloc CPU set:
A set of processors included in an hwloc object.  The hwloc definition
of "CPU set" does not carry any the same connotations as Linux's "CPU
set" (e.g., process affinity, etc.).
.
.TP
.B Linux CPU set:
See http://www.mjmwired.net/kernel/Documentation/cpusets.txt for a
discussion of Linux CPU sets.  A
super-short-ignoring-many-details description (taken from that page)
is:
.
.\" Force a paragraph break, but keep the indentation
.TP
\ 
.
 "Cpusets provide a mechanism for assigning a set of CPUs and Memory
Nodes to a set of tasks."
.
.TP
.B Linux Cgroup:
See http://www.mjmwired.net/kernel/Documentation/cgroups.txt for a
discussion of Linux control groups.  A
super-short-ignoring-many-details description (taken from that page)
is:
.
.\" Force a paragraph break, but keep the indentation
.TP
\ 
 "Control Groups provide a mechanism for aggregating/partitioning sets
of tasks, and all their future children, into hierarchical groups
with specialized behaviour."
.
.PP
To be clear, hwloc supports all of the above concepts.  It is simply
worth noting that they are 3 different things.
.
.SS Location Specification
.
Locations refer to specific regions within a topology.  Before reading
the rest of this man page, it may be useful to read lstopo(1) and/or
run lstopo on your machine to see the reported topology tree.  Seeing
and understanding a topology tree will definitely help in
understanding the concepts that are discussed below.
.
.PP
Locations can be specified in multiple ways:
.
.TP 10
.B Tuples:
Tuples of hwloc "objects" and associated indexes can be specified in
the form
.IR object:index .
Hwloc objects represent types of mapped items (e.g., sockets, cores,
etc.) in a topology tree; indexes are non-negative integers that
specify a unique physical object in a topology tree.  Both concepts
are described in detail, below.  
.\" Force a paragraph break, but keep the indentation.
.TP
\ 
Chaining multiple tuples together in the more general form
.I object1:index[.object2:index2[...]]
is permissable.  While the first tuple's object may appear anywhere in
the topology, the Nth tuple's object must have a shallower topology
depth than the (N+1)th tuple's object.  Put simply: as you move right
in a tuple chain, objects must go deeper in the topology tree.
Indexes specified in chained tuples are relative to the scope of the
parent object.  For example, "socket:0.core:1" refers to the second
core in the first socket.
.
.TP
.B Hex:
Locations can also be specified as hexidecimal bitmasks prefixed 
.
with "0x".  Commas must be used to separate the hex digits into blocks
of 8, such as "0xffc0140,0x00020110".
.
Leading zeros in each block do not need to be specified.  
.
For example, "0xffc0140,0x20110" is equivalent to the prior example,
and "0x0000000f" is exactly equivalent to "0xf".  Intermediate blocks
of 8 digits that are all zeoro can be left empty; "0xff0,,0x13" is
equivalent to "0xff0,0x00000000,0x13".
.
.PP
Multiple locations can be specified on the hwloc-bind command line
(delimited by whitespace); the first token of the execution command is
assumed to either follow "--" (if specified) or the first token that
is unrecognized as a location.
.
By default, multiple locations are added, meaning that the binding
will be wider in the sense that the process may run on more objects.
If prefixed with "~", the given location will be cleared instead of
added to the current list of locations.
If prefixed with "x", the given location will be and'ed instead of
added to the current list.
If prefixed with "^", the given location will be xor'ed.
.
More complex operations may be performed by using
.R hwloc-mask
to compute intermediate values.
.
.SS Hwloc Objects
.
.PP
Objects can be any of the following strings
.
(listed from "biggest" to "smallest"):
.
.TP 10
.B system
The entire system that hwloc can see.  This is usually a single
computer / server (and is therefore usually a synonym for
.BR machine ), 
but it can also be a cluster of machines that comprise an overall
single system image (SSI), such as Kerrighed.
.
.TP
.B machine
A set of processors and memory.
.
.TP
.B node
A NUMA node; a set of processors around memory which the processors
can directly access.
.
.TP
.B socket
Typically a physical package or chip, it is a grouping of one or more
processors.
.
.TP
.B core
A single, physical processing unit which may still contain multiple
logical processors, such as hardware threads.
.
.TP
.B proc
Short for 
.I processor 
(not 
.IR process !).  
The smallest physical execution unit that hwloc recognizes.  For
example, there may be multiple procs on a core (e.g.,
hardware threads).
.
.PP
Finally, note that an object can be denoted by its numeric "depth" in
the topology graph.  See the Examples section for more information.
.
.SS Hwloc Indexes
Indexes are integer values that uniquely specify a given object of a
specific type.  Indexes can be expressed either as
.I logical
values or
.I physical 
values.  
While
.B hwloc-bind only accepts logical indexes as
.BR input ,
both logical and physical indexes are described on this man page for
completeness.
.
.PP
.I Logical
indexes are relative to the object order in the output from the
lstopo command.  They always start with 0 and increment by 1 for each
successive object.
.
.PP
.I Physical 
indexes are how the operating system refers to objects.  Note that
while physical indexes are non-negative integer values, the hardware
and/or operating system may choose arbitrary values -- they need not
start with 0, and successive objects may not have consecutive values.
.
.PP
For example, if the first few lines of lstopo output are the
following:
.

  System(32GB)
    Node#0(16GB) + Socket#0 + L3(16MB)
      L2(128KB) + L1(32KB) + Core#0
        P#3
        P#7
      L2(128KB) + L1(32KB) + Core#1
        P#3
        P#7

The first processor on the second core is logically number 2 (i.e.,
logically the 3rd processor, starting from 0).  Its physical index is
3, but note that another processor
.I also 
has a physical index of 3.  Hence, physical indexes may only be
relevant within the scope of their parent (or set of grandparents).
In this example, to uniquely identify logical processor 2 with
physical indexes, you must specify (at a minimum) both a core and a
processor: core 1, processor 3.
.PP
Index values, regardless of whether they are logical or physical, can
be expressed in several different forms (where X, Y, and N are
positive integers):
.
.TP 10
.B X
The object with index value X.
.
.TP
.B X-Y
All the objects with index values >= X and <= Y.
.
.TP
.B X-
All the objects with index values >= X.
.
.TP
.B X:N
N objects starting with index X, possibly wrapping around the end of
the level.
.
.TP
.B all
A special index value indicating all valid index values.
.
.TP
.B odd
A special index value indicating all valid odd index values.
.
.TP
.B even
A special index value indicating all valid even index values.
.
.PP
.IR REMEMBER :
hwloc-bind accepts 
.I logical 
indexes for location values.
.\" **************************
.\"    Examples Section
.\" **************************
.SH EXAMPLES
.PP
To run the echo command on the first logical processor of the second
socket:

    hwloc-bind socket:1.proc:0 -- echo hello

which is exactly equivalent to

    hwloc-bind socket:1.proc:0 echo hello

To bind the "echo" command to the first core of the second socket and
the second core of the first socket:

    hwloc-bind socket:1.core:0 socket:0.core:1 echo hello

Note that binding the "echo" command to multiple processors is
probably meaningless (because "echo" is likely implemented as a
single-threaded application); these examples just serve to show what
hwloc-bind can do.
.
.PP
To run on the three first sockets on the second and third nodes:

    hwloc-bind node:1-2.socket:0:3 echo hello

To run on odd cores within even sockets:

    hwloc-bind socket:even.core:odd echo hello

To run on the first socket, except on its second and fifth cores:

    hwloc-bind socket:0 ~socket:0.core:1 ~socket:0.core:4 echo hello

The --get option can report current bindings.  This example shows
nesting hwloc-bind invocations to set a binding and then report it:

    hwloc-bind node:1.socket:2 hwloc-bind --get

On one of the hwloc developer's machines, this example
.
reports "0x00004444,0x44000000".  The mask reported on your machine
may be different.
.
.PP
Locations may also be specified as a hex bit mask (typically generated
by hwloc-mask).  For example:

    hwloc-bind 0x00004444,0x44000000 echo hello
    hwloc-bind `hwloc-mask node:1.socket:2` echo hello
.
.\" **************************
.\"    Return value section
.\" **************************
.SH RETURN VALUE
Upon successful execution, hwloc-bind execs the command over itself.
The return value is therefore whatever the return value of the command
is.
.
.PP
hwloc-bind will return nonzero if any kind of error occurs, such as
(but not limited to): failure to parse the command line, failure to
retrieve process bindings, or lack of a command to execute.
.
.\" **************************
.\"    See also section
.\" **************************
.SH SEE ALSO
.
.ft R
lstopo(1), hwloc-mask(1), hwloc-distrib(1)
.sp
