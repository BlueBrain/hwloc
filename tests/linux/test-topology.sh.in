#!@BASH@
#-*-sh-*-

#
# Copyright © 2009 CNRS, INRIA, Université Bordeaux 1
#
# This software is a computer program whose purpose is to provide
# abstracted information about the hardware topology.
#
# This software is governed by the CeCILL-B license under French law and
# abiding by the rules of distribution of free software.  You can  use,
# modify and/ or redistribute the software under the terms of the CeCILL-B
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info".
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or
# data to be ensured and,  more generally, to use and operate it in the
# same conditions as regards security.
#
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL-B license and that you accept its terms.
#


# Check the conformance of `lstopo' for all the Linux sysfs
# hierarchies available here.  Return true on success.


abs_top_builddir="@abs_top_builddir@"
lstopo="$abs_top_builddir/utils/lstopo"

topology="$1"

error()
{
    echo $@ 2>&1
}

# topology_cpu_count TOPOLOGY-DIR
#
# Print the number of CPUs listed in the sysfs hierarchy under
# TOPOLOGY-DIR.
topology_cpu_count()
{
    ( cd "$1"/sys/devices/system/cpu ; echo cpu[0-9]* | wc -w )
}

# flavor_max_cpu_count
#
# Print the maximum number of CPUs supported in the current flavor's
# CPU set implementation.
flavor_max_cpu_count()
{
    # Must be equal to `LIBTOPO_NBMAXCPUS'.
    echo 1024
}

# test_topology NAME TOPOLOGY-DIR
#
# Test the topology under TOPOLOGY-DIR.  Return true on success.
test_topology ()
{
    local name="$1"
    local dir="$2"
    local expected_output="$3"
    local options="$4"

    local output="`mktemp`"

    export TOPO_FSYS_ROOT_PATH="$dir"

    if ! "$lstopo" - -v `cat $options 2>/dev/null` > "$output"
    then
	result=1
    else
	diff -uBb "$expected_output" "$output"
	result=$?
    fi

    rm "$output"

    return $result
}

# test_eligible TOPOLOGY-DIR
#
# Return true if the topology under TOPOLOGY-DIR is eligible for
# testing with the current flavor.
test_eligible()
{
    local dir="$1"
    local output="$2"

    [ -d "$dir" -a -f "$output" ] &&				\
	[ `flavor_max_cpu_count` -ge `topology_cpu_count "$dir"` ]
}


if [ ! -x "$lstopo" ]
then
    error "Could not find executable file \`$lstopo'."
    exit 1
fi

result=1

dir="`mktemp -d`"

if ! ( gunzip -c "$topology" | ( cd "$dir" && tar xf - ) )
then
    error "failed to extract topology \`$topology'"
else
    actual_dir="`echo "$dir"/*`"
    actual_output="$topology".output
    actual_options="$topology".options

    if test_eligible "$actual_dir" "$actual_output"
    then
	test_count="`expr $test_count + 1`"

	test_topology "`basename $topology`" "$actual_dir" "$actual_output" "$actual_options"
	result=$?
    else
	# Skip this test.
	result=77
    fi
fi

rm -rf "$dir"

exit $result
