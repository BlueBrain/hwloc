# -*- autoconf -*-
#
# Copyright © 2009 CNRS, INRIA, Université Bordeaux 1
# Copyright © 2009 Cisco Systems, Inc.  All rights reserved.
#
# See COPYING in top-level directory.
#

#
# Initialize autostuff
#

AC_PREREQ([2.63])
AC_INIT([hwloc], 
        [m4_normalize(esyscmd([config/hwloc_get_version.sh VERSION --base]))],
        [http://www.open-mpi.org/community/help/], [hwloc])
AC_CONFIG_AUX_DIR([config])
AC_CONFIG_MACRO_DIR([config])
AC_CANONICAL_SYSTEM
AC_CONFIG_SRCDIR([src/topology.c])

AM_INIT_AUTOMAKE([1.10 foreign -Wall -Werror])

# Make configure depend on the VERSION file, since it's used in AC_INIT

AC_SUBST([CONFIGURE_DEPENDENCIES], ['$(top_srcdir)/VERSION'])

# Get the version of hwloc that we are installing

AC_MSG_CHECKING([for hwloc version])
HWLOC_VERSION="`$srcdir/config/hwloc_get_version.sh $srcdir/VERSION`"
HWLOC_MAJOR_VERSION="`$srcdir/config/hwloc_get_version.sh $srcdir/VERSION --major`"
HWLOC_MINOR_VERSION="`$srcdir/config/hwloc_get_version.sh $srcdir/VERSION --minor`"
HWLOC_RELEASE_VERSION="`$srcdir/config/hwloc_get_version.sh $srcdir/VERSION --release`"
HWLOC_SVN_R="`$srcdir/config/hwloc_get_version.sh $srcdir/VERSION --svn`"
HWLOC_RELEASE_DATE="`$srcdir/config/hwloc_get_version.sh $srcdir/VERSION --release-date`"
AC_SUBST(HWLOC_VERSION)
AC_SUBST(HWLOC_SVN_R)
AC_SUBST(HWLOC_RELEASE_DATE)
AC_DEFINE_UNQUOTED([HWLOC_MAJOR_VERSION], [$HWLOC_MAJOR_VERSION],
    [Major version of hwloc])
AC_DEFINE_UNQUOTED([HWLOC_MINOR_VERSION], [$HWLOC_MINOR_VERSION],
    [Minor version of hwloc])
AC_DEFINE_UNQUOTED([HWLOC_RELEASE_VERSION], [$HWLOC_RELEASE_VERSION],
    [Release version of hwloc])
AC_MSG_RESULT([$HWLOC_VERSION])

# Override/fixup the version numbers set by AC_INIT, since on
# developer builds, there's no good way to know what the version is
# before running configure :(.  We only use the base version number
# (ie, no svn r numbers) for the version set in AC_INIT.  This will
# always match reality because we add the VERSION file (the only way
# to change the major.minor.release{greek}) into the configure
# dependencies.

PACKAGE_VERSION="$HWLOC_VERSION"
PACKAGE_STRING="${PACKAGE_NAME} ${PACKAGE_VERSION}"
VERSION="${PACKAGE_VERSION}"

# For standalone configurations, we also include a .so version number.

. $srcdir/VERSION
AC_SUBST([libhwloc_so_version])

# Setup the header file

AH_TOP([/* -*- c -*-
 *
 * Copyright © 2009 CNRS, INRIA, Université Bordeaux 1
 * Copyright © 2009 Cisco Systems, Inc.  All rights reserved.
 * $COPYRIGHT$
 * 
 * Additional copyrights may follow
 * 
 * $HEADER$
 *
 * This file is automatically generated by configure.  Edits will be lost
 * the next time you run configure!
 */

#ifndef HWLOC_CONFIGURE_H
#define HWLOC_CONFIGURE_H
])
AH_BOTTOM([
#endif /* HWLOC_CONFIGURE_H */
])

# We only build documentation if this is a developer checkout.
# Distribution tarballs just install pre-built docuemntation that was
# included in the tarball.

AC_MSG_CHECKING([if this is a developer build])
AS_IF([test ! -d "$srcdir/.svn" -a ! -d "$srcdir/.hg" -a ! -d "$srcdir/.git"],
      [AC_MSG_RESULT([no (doxygen generation is optional)])],
      [AC_MSG_RESULT([yes])])

# Generating the doxygen output requires a few tools.  If we
# don't have all of them, refuse the build the docs.
AC_ARG_VAR([DOXYGEN], [Location of the doxygen program (required for building the hwloc doxygen documentation)])
AC_PATH_TOOL([DOXYGEN], [doxygen])

AC_ARG_VAR([PDFLATEX], [Location of the pdflatex program (required for building the hwloc doxygen documentation)])
AC_PATH_TOOL([PDFLATEX], [pdflatex])

AC_ARG_VAR([MAKEINDEX], [Location of the makeindex program (required for building the hwloc doxygen documentation)])
AC_PATH_TOOL([MAKEINDEX], [makeindex])

AC_ARG_VAR([FIG2DEV], [Location of the fig2dev program (required for building the hwloc doxygen documentation)])
AC_PATH_TOOL([FIG2DEV], [fig2dev])

AC_MSG_CHECKING([if can build doxygen docs])
AS_IF([test "x$DOXYGEN" != "x" -a "x$PDFLATEX" != "x" -a "x$MAKEINDEX" != "x" -a "x$FIG2DEV" != "x"],
             [generate_doxs=yes], [generate_doxs=no])
AC_MSG_RESULT([$generate_doxs])

# Making the top-level README requires w3m or lynx.
AC_ARG_VAR([W3M], [Location of the w3m program (required to building the top-level hwloc README file)])
AC_PATH_TOOL([W3M], [w3m])
AC_ARG_VAR([LYNX], [Location of the lynx program (required to building the top-level hwloc README file)])
AC_PATH_TOOL([LYNX], [lynx])

AC_MSG_CHECKING([if can build top-level README])
AS_IF([test "x$W3M" != "x"],
      [generate_readme=yes
       W3_GENERATOR=$W3M],
      [AS_IF([test "x$LYNX" != "x"],
             [generate_readme=yes
              W3_GENERATOR="$LYNX -dump -nolist"],
             [generate_readme=no])])
AC_SUBST(W3_GENERATOR)
AC_MSG_RESULT([$generate_readme])

# If any one of the above tools is missing, we will refuse to make dist.

AC_ARG_ENABLE([doxygen],
    [AC_HELP_STRING([--enable-doxygen],
                    [enable support for building Doxygen documentation (note that this option is ONLY relevant in developer builds; Doxygen documentation is pre-built for tarball builds and this option is therefore ignored)])])
AC_MSG_CHECKING([if will build doxygen docs])
AS_IF([test "x$generate_doxs" = "xyes" -a "x$enable_doxygen" != "xno"],
      [], [generate_doxs=no])
AC_MSG_RESULT([$generate_doxs])

# See if we want to install the doxygen docs
AC_MSG_CHECKING([if will install doxygen docs])
AS_IF([test "x$generate_doxs" = "xyes" -o \
	    -f "$srcdir/doc/doxygen-doc/man/man3/hwloc_distribute.3" -a \
	    -f "$srcdir/doc/doxygen-doc/hwloc.pdf"],
      [install_doxs=yes],
      [install_doxs=no])
AC_MSG_RESULT([$install_doxs])

AM_CONDITIONAL([BUILD_DOXYGEN], [test "x$generate_doxs" = "xyes"])
AM_CONDITIONAL([BUILD_README], [test "x$generate_readme" = "xyes" -a \( "x$install_doxs" = "xyes" -o "x$generate_doxs" = "xyes" \) ])
AM_CONDITIONAL([INSTALL_DOXYGEN], [test "x$install_doxs" = "xyes"])

#
# Check OS support
#

case ${target} in
  *-*-linux*)
    AC_DEFINE(LINUX_SYS, 1, Define to 1 on Linux)
    linux=yes
    ;;
  *-*-irix*)
    AC_DEFINE(IRIX_SYS, 1, Define to 1 on Irix)
    irix=yes
    ;;
  *-*-darwin*)
    AC_DEFINE(DARWIN_SYS, 1, Define to 1 on Darwin)
    darwin=yes
    ;;
  *-*-solaris*)
    AC_DEFINE(SOLARIS_SYS, 1, Define to 1 on Solaris)
    solaris=yes
    ;;
  *-*-aix*)
    AC_DEFINE(AIX_SYS, 1, Define to 1 on AIX)
    aix=yes
    ;;
  *-*-osf*)
    AC_DEFINE(OSF_SYS, 1, Define to 1 on OSF)
    osf=yes
    ;;
  *-*-hpux*)
    AC_DEFINE(HPUX_SYS, 1, Define to 1 on HP-UX)
    hpux=yes
    ;;
  *-*-mingw*|*-*-cygwin*)
    AC_DEFINE(WIN_SYS, 1, Define to 1 on WINDOWS)
    windows=yes
    ;;
  *)
    echo Warning: Host type \"${target}\" not yet supported.
    ;;
esac

AM_CONDITIONAL([HAVE_LINUX], [test "x$linux" = "xyes"])
AM_CONDITIONAL([HAVE_IRIX], [test "x$irix" = "xyes"])
AM_CONDITIONAL([HAVE_DARWIN], [test "x$darwin" = "xyes"])
AM_CONDITIONAL([HAVE_SOLARIS], [test "x$solaris" = "xyes"])
AM_CONDITIONAL([HAVE_AIX], [test "x$aix" = "xyes"])
AM_CONDITIONAL([HAVE_OSF], [test "x$osf" = "xyes"])
AM_CONDITIONAL([HAVE_HPUX], [test "x$hpux" = "xyes"])
AM_CONDITIONAL([HAVE_WINDOWS], [test "x$windows" = "xyes"])
AM_CONDITIONAL([HAVE_MINGW32], [test "x$target_os" = "xmingw32"])

#
# Define C flags
#

AC_USE_SYSTEM_EXTENSIONS # for O_DIRECTORY, fdopen, ffsl, ...
AH_VERBATIM([USE_HPUX_SYSTEM_EXTENSIONS],
[/* Enable extensions on HP-UX. */
#ifndef _HPUX_SOURCE
# undef _HPUX_SOURCE
#endif
])
AC_DEFINE([_HPUX_SOURCE])

AC_LANG([C])

AM_PROG_CC_C_O
AC_PROG_CC_C99
AC_PROG_LN_S
AC_PROG_MKDIR_P
AC_PROG_EGREP
PKG_CHECK_EXISTS

HWLOC_GCC_FLAGS
HWLOC_CHECK_DIFF_U

AC_CHECK_SIZEOF([unsigned long])
AC_DEFINE_UNQUOTED([HWLOC_SIZEOF_UNSIGNED_LONG], $ac_cv_sizeof_unsigned_long, [The size of `unsigned long', as computed by sizeof])
AC_CHECK_SIZEOF([unsigned int])
AC_DEFINE_UNQUOTED([HWLOC_SIZEOF_UNSIGNED_INT], $ac_cv_sizeof_unsigned_int, [The size of `unsigned int', as computed by sizeof])

#
# Now detect support
#

hwloc_strncasecmp=strncmp
AC_CHECK_FUNCS([strncasecmp], [
  AC_CHECK_DECL([strncasecmp], [
    hwloc_strncasecmp=strncasecmp
  ])
])
AC_DEFINE_UNQUOTED(hwloc_strncasecmp, $hwloc_strncasecmp, [Define this to either strncasecmp or strncmp])

AC_CHECK_TYPES([wchar_t], [
  AC_CHECK_FUNCS([putwc])
], [], [[#include <wchar.h>]])

AC_CHECK_HEADERS([locale.h], [
  AC_CHECK_FUNCS([setlocale])
])
AC_CHECK_HEADERS([langinfo.h], [
  AC_CHECK_FUNCS([nl_langinfo])
])
AC_CHECK_HEADERS([curses.h], [
  AC_CHECK_HEADERS([term.h], [
    AC_CHECK_LIB([termcap], [tparm])
  ], [], [[#include <curses.h>]])
])

AC_CHECK_TYPES([KAFFINITY,
    		    PROCESSOR_CACHE_TYPE,
		    CACHE_DESCRIPTOR,
		    LOGICAL_PROCESSOR_RELATIONSHIP,
		    SYSTEM_LOGICAL_PROCESSOR_INFORMATION,
		    GROUP_AFFINITY,
		    PROCESSOR_RELATIONSHIP,
		    NUMA_NODE_RELATIONSHIP,
		    CACHE_RELATIONSHIP,
		    PROCESSOR_GROUP_INFO,
		    GROUP_RELATIONSHIP,
		    SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX],
		    [],[],[[#include <windows.h>]])
AC_HAVE_LIBRARY(gdi32)

AC_CHECK_HEADER([windows.h], [
  AC_DEFINE([HWLOC_HAVE_WINDOWS_H], [1], [Define to 1 if you have the `windows.h' header.])
])

AC_CHECK_HEADERS([sys/lgrp_user.h], [
  AC_HAVE_LIBRARY([lgrp])
])
AC_CHECK_HEADERS([kstat.h], [
  AC_HAVE_LIBRARY([kstat])
])

AC_CHECK_HEADERS([infiniband/verbs.h], [
  AC_HAVE_LIBRARY([ibverbs], [have_libibverbs=yes])
])
AM_CONDITIONAL([HAVE_LIBIBVERBS], [test "x$have_libibverbs" = "xyes"])

AC_CHECK_DECLS([_SC_NPROCESSORS_ONLN,
		_SC_NPROCESSORS_CONF,
		_SC_NPROC_ONLN,
		_SC_NPROC_CONF,
		_SC_LARGE_PAGESIZE],,[:],[[#include <unistd.h>]])

AC_HAVE_HEADERS([mach/mach_host.h])
AC_HAVE_HEADERS([mach/mach_init.h], [
  AC_CHECK_FUNCS([host_info])
])

case ${target} in
  *-*-mingw*|*-*-cygwin*)
    hwloc_pid_t=HANDLE
    hwloc_thread_t=HANDLE
    ;;
  *)
    hwloc_pid_t=pid_t
    AC_CHECK_TYPES([pthread_t], [hwloc_thread_t=pthread_t], [:], [[#include <pthread.h>]])
    ;;
esac
AC_DEFINE_UNQUOTED(hwloc_pid_t, $hwloc_pid_t, [Define this to the process ID type])
if test "x$hwloc_thread_t" != "x" ; then
  AC_DEFINE_UNQUOTED(hwloc_thread_t, $hwloc_thread_t, [Define this to the thread ID type])
fi

AC_COMPILE_IFELSE(AC_LANG_PROGRAM([[
#define _GNU_SOURCE
#include <sched.h>
static unsigned long mask;
]], [[ sched_setaffinity(0, (void*) &mask);
]]), AC_DEFINE([HAVE_OLD_SCHED_SETAFFINITY], [1], [Define to 1 if glibc provides the old prototype of sched_setaffinity()]))

AC_ARG_ENABLE([cairo],
  [AS_HELP_STRING([--disable-cairo], [disable the Cairo back-end of `lstopo'])],
  [enable_cairo="$enableval"],
  [enable_cairo="yes"])

if test "x$enable_cairo" = "xyes"; then
  PKG_CHECK_MODULES([CAIRO], [cairo], [:], [enable_cairo="no"])
  if test "x$enable_cairo" = "xyes"; then
    AC_CHECK_HEADERS([X11/Xlib.h],
      [AC_CHECK_HEADERS([X11/Xutil.h X11/keysym.h],
        [enable_X11=yes
         AC_DEFINE([HAVE_X11], [1], [Define to 1 if X11 libraries are available.])],,
        [[#include <X11/Xlib.h>]])
      ])
    if test "x$enable_X11" != "xyes"; then
      AC_MSG_WARN([X11 headers not found, Cairo/X11 back-end disabled])
    fi
  fi
fi

if test "x$enable_cairo" = "xyes"; then
  AC_DEFINE([HAVE_CAIRO], [1], [Define to 1 if you have the `cairo' library.])
fi

AC_ARG_ENABLE([xml],
  [AS_HELP_STRING([--disable-xml], [disable the XML back-end of `lstopo'])],
  [enable_xml="$enableval"],
  [enable_xml="yes"])

if test "x$enable_xml" = "xyes"; then
  PKG_CHECK_MODULES([XML], [libxml-2.0], [:], [enable_xml="no"])
fi

if test "x$enable_xml" = "xyes"; then
  HWLOC_REQUIRES="libxml-2.0 $HWLOC_REQUIRES"
  AC_DEFINE([HAVE_XML], [1], [Define to 1 if you have the `xml' library.])
  AC_SUBST([HAVE_XML], [1])
else
  AC_SUBST([HAVE_XML], [0])
fi
AM_CONDITIONAL([HAVE_XML], [test "x$enable_xml" = "xyes"])

# check for kerrighed, but don't abort if not found
PKG_CHECK_MODULES([KERRIGHED], [kerrighed >= 2.0], [], [:])

# disable C++, F77, Java and Windows Resource Compiler support
LT_PREREQ([2.2.6])
LT_INIT
LT_LANG([C])
AC_LIBTOOL_WIN32_DLL
AM_CONDITIONAL([HAVE_GCC], [test "x$GCC" = "xyes"])
AC_PATH_PROGS([HWLOC_MS_LIB], [lib])
AC_ARG_VAR([HWLOC_MS_LIB], [Path to Microsoft's Visual Studio `lib' tool])
AM_CONDITIONAL([HAVE_MS_LIB], [test "x$HWLOC_MS_LIB" != "x"])

AC_ARG_ENABLE([debug],
  AS_HELP_STRING([--enable-debug], [enable debugging messages]),
  [enable_debug="$enableval"],
  [enable_debug="no"])

AC_MSG_CHECKING([whether debug is enabled])
if test x$enable_debug = xyes; then
  AC_DEFINE_UNQUOTED([HWLOC_DEBUG], [1], [Define to 1 to enable debug])
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi

AC_PATH_PROG([BASH], [bash])

AC_CHECK_FUNCS([ffs], [
  AC_CHECK_DECL([ffs],[
    AC_DEFINE([HWLOC_HAVE_DECL_FFS], [1], [Define to 1 if function `ffs' is declared by system headers])
  ])
  AC_DEFINE([HWLOC_HAVE_FFS], [1], [Define to 1 if you have the `ffs' function.])
])
AC_CHECK_FUNCS([ffsl], [
  AC_DEFINE([HWLOC_HAVE_FFSL], [1], [Define to 1 if you have the `ffsl' function.])
])

AC_CHECK_FUNCS([fls], [
  AC_CHECK_DECL([fls],[
    AC_DEFINE([HWLOC_HAVE_DECL_FLS], [1], [Define to 1 if function `fls' is declared by system headers])
  ])
  AC_DEFINE([HWLOC_HAVE_FLS], [1], [Define to 1 if you have the `fls' function.])
])
AC_CHECK_FUNCS([flsl], [
  AC_DEFINE([HWLOC_HAVE_FLSL], [1], [Define to 1 if you have the `flsl' function.])
])

AC_CHECK_FUNCS([clz], [
  AC_CHECK_DECL([clz],[
    AC_DEFINE([HWLOC_HAVE_DECL_CLZ], [1], [Define to 1 if function `clz' is declared by system headers])
  ])
  AC_DEFINE([HWLOC_HAVE_CLZ], [1], [Define to 1 if you have the `clz' function.])
])
AC_CHECK_FUNCS([clzl], [
  AC_DEFINE([HWLOC_HAVE_CLZL], [1], [Define to 1 if you have the `clzl' function.])
])

AC_CHECK_FUNCS([openat], [have_openat=yes])
AM_CONDITIONAL([HAVE_OPENAT], [test "x$have_openat" = "xyes"])

AC_FUNC_ALLOCA

AC_CHECK_DECL([numa_bitmask_alloc], [have_linux_libnuma=yes], [],
	      [#include <numa.h>])
AM_CONDITIONAL([HAVE_LINUX_LIBNUMA], [test "x$have_linux_libnuma" = "xyes"])

AC_CHECK_DECLS([pthread_setaffinity_np],,[:],[[#include <pthread.h>]])
AC_CHECK_FUNC([sched_setaffinity], [have_sched_setaffinity=yes])
AM_CONDITIONAL([HAVE_SCHED_SETAFFINITY], [test "x$have_sched_setaffinity" = "xyes"])

AC_CHECK_PROGS(XMLLINT, [xmllint])

AC_SUBST(HWLOC_REQUIRES)

AC_CONFIG_HEADER([include/private/config.h])

AC_CONFIG_FILES([hwloc.pc
		 doc/doxygen-config.cfg

		 Makefile
		 doc/Makefile
                 include/Makefile
		 src/Makefile 
		 tests/Makefile 
		 tests/linux/Makefile
		 tests/linux/gather-topology.sh
		 tests/linux/test-topology.sh
		 tests/lstopo_xml.sh
		 tests/ports/Makefile
		 utils/Makefile
		 utils/test-hwloc-distrib.sh
])

AC_CONFIG_HEADERS([include/hwloc/config.h])

AC_CONFIG_COMMANDS([linux-topology-scripts],
                   [chmod +x tests/linux/test-topology.sh tests/lstopo_xml.sh tests/linux/gather-topology.sh utils/test-hwloc-distrib.sh])

AC_OUTPUT
