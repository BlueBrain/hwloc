* uniformize SMT / PROC / thread names => "CPU" ?
  + if we keep a "proc" level at the bottom, should we make its type
    ignorable for real? otherwise, we could get L1 objects at the bottom

* make cache size/depth/type, memory node size + hugepagefree a resource attribute
* there could be several size for huge pages

* Implement topological sorting so that backends do not have to care about the
  order in which they report resources.

* integrate marcel split quirk?
  + split for real, just explain how to split?
    - just return an ordered array?
  + keep fake level type?
    - needed for synthetic
      . might be dropped once we have a generic CACHE type?
    - needed for meta-numa-nodes?

* use topology_allocator for real, including in strdup
  + add topo_set_allocator() to be called before _init()

* conversion between strings and cpuset:
  void topo_string_to_mask(const char *string, topo_cpuset_t *cpuset)
  void topo_mask_to_string(topo_cpuset_t *cpuset, const char *string)
* conversion between cpuset and the lowest ancestors covering it
  void topo_mask_to_ancestor(topo_cpuset_t *cpuset, topo_level_t *level)
* conversion between cpuset and an array of highest levels covering exactly it
  int topo_mask_to_levels(topo_cpuset_t *cpuset, topo_level_t *levels, int max)
 
API:
* add a way to extract sched_setaffinity masks from arrays of levels (OR'ed)
  + or bind directly?
* add a way to extract libnuma-friendly masks of nodes from arrays of levels (OR'ed)
  + no level = empty mask, and we may want an easy alias for "whole machine"
* add reverse-routines converting sched_getaffinity or libnuma masks into a ancestor level
* provide traversal functions instead of pointers in structures?


Binding tool for OAR, MPI, Hydra, MPI+OpenMP:
* topo_taskset --ncpus 2 --near 3
  bind process on 2 cores near physical proc id 3
* topo_taskset --index 4
  bind process on 4th processor in a topology-aware numbering
* topo_taskset --ncpus 2 --index 4
  bind process on the 4th set of 2 physically close ids in a topology-aware numbering (used by ggrun when launching 4 process with 2 threads)
* topo_taskset --on <Machine/Node/Die/L3/L2/Core/L1/Proc/<depth>>:<index>
  bind process on object #index in level given by name or depth
* tools to create masks and bind using them


Add an include directory to be able to compile code for non-linux platforms just
for make checks.
