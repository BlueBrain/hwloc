* topomask: add an option to request a cpuset containing of n close entries
  among the generated cpuset

* have an easy way to get a valid full set (alias on get_machine_object()->cpuset) ?

* make cache size/depth/type, memory node size + hugepagefree a resource attribute
* there could be several size for huge pages

* Implement topological sorting so that backends do not have to care about the
  order in which they report resources.

* integrate marcel split quirk?
  + split for real, just explain how to split?
    - just return an ordered array?
  + keep fake level type?
    - needed for synthetic
    - needed for meta-numa-nodes?

* use topology_allocator for real, including in strdup
  + add topo_set_allocator() to be called before _init()

* cache or node specific functions?
  + get nodes covering a cpuset?
  + get shared cache*S* covering a cpuset?

* topo_set_cpubind(pid, ...) which type for pid? POSIX says that pid_t is a
  signed integer type
* topo_set_cpubind for threads, pb: depending on the OS, the function takes a
  pthread_t or a kernel tid.
* expose the internal conversion from cpuset to sched_setaffinity mask?
  + reverse routine?
* topo_set_membind()
  + reverse routine?
  + no level = empty mask, and we may want an easy alias for "whole machine"

* Kerrighed: parse only /proc/nodes/node%d/cpuinfo. Use
int migrate (pid_t pid, int destination_node);
int migrate_self (int destination_node);
int thread_migrate (int thread_id, int destination_node);

* harmonize topo_object_* / topo_obj_*?

Binding tool for OAR, MPI, Hydra, MPI+OpenMP:
* topo_taskset --ncpus 2 --near 3
  bind process on 2 cores near physical proc id 3
* topo_taskset --index 4
  bind process on 4th processor in a topology-aware numbering
* topo_taskset --ncpus 2 --index 4
  bind process on the 4th set of 2 physically close ids in a topology-aware numbering (used by ggrun when launching 4 process with 2 threads)
* tools to create masks and bind using them
