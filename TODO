* integrate marcel split quirk?
  + split for real, just explain how to split?
* integrate synthetic topology support

* factorize all /proc/meminfo reading routines
* factorize all /sys/.../node/meminfo reading routines
* move DMI reading info to topology-linux.c

* use topology_allocator for real, including in strdup
* how does the application change the memory allocator?
  + another argument in lt_topo_init() ?
  + or more generic way with an array or { int type; void *obj; }
    to pass the fsys_root_path, memory_allocator, ...

* add a way to keep cpuset/offline-disabled cpu? (env variable?)
  + hard for offline cpus on linux since cache info is removed and thus removes cache parents
    - traverse from bottom to top and add missing "disabled" parents?

* conversion between strings and cpuset:
  void lt_string_to_mask(const char *string, lt_cpuset_t *cpuset)
  void lt_mask_to_string(lt_cpuset_t *cpuset, const char *string)
* conversion between cpuset and the lowest ancestors covering it
  void lt_mask_to_ancestor(lt_cpuset_t *cpuset, lt_level_t *level)
* conversion between cpuset and an array of highest levels covering exactly it
  int lt_mask_to_levels(lt_cpuset_t *cpuset, lt_level_t *levels, int max)
 
* the depth field does not mean much for the application as long as
  we don't merge levels. we could do a pass to detect levels that
  could be merged, and compute the corresponding actual depth

API:
* add a lt_topo_merge() merging everything possible (or just a level)
  + or add som flags to lt_topo_init
* add lt_topo_split()? 
* add a way to extract sched_setaffinity masks from arrays of levels (OR'ed)
  + or bind directly?
* add a way to extract libnuma-friendly masks of nodes from arrays of levels (OR'ed)
  + no level = empty mask, and we may want an easy alias for "whole machine"
* add reverse-routines converting sched_getaffinity or libnuma masks into a ancestor level


Binding tool for OAR, MPI, Hydra, MPI+OpenMP:
* lt_taskset --ncpus 2 --near 3
  bind process on 2 cores near physical proc id 3
* lt_taskset --ncpus 2 --index 4
  bind process on the 4th set of 2 physically close ids (used by ggrun when launching 4 process with 2 threads)
* lt_taskset --on <Machine/Node/Die/L3/L2/Core/L1/Proc/<depth>>:<index>
  bind process on object #index in level given by name or depth
* tools to create masks and bind using them
