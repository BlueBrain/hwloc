* uniformize SMT / PROC / thread names => "CPU" ?
  + if we keep a "proc" level at the bottom, should we make its type
    ignorable for real? otherwise, we could get L1 objects at the bottom

* have an easy way to get a valid full set (alias on get_machine_object()->cpuset) ?

* get first shared cache above for starpu

* make cache size/depth/type, memory node size + hugepagefree a resource attribute
* there could be several size for huge pages

* Implement topological sorting so that backends do not have to care about the
  order in which they report resources.

* integrate marcel split quirk?
  + split for real, just explain how to split?
    - just return an ordered array?
  + keep fake level type?
    - needed for synthetic
      . might be dropped once we have a generic CACHE type?
    - needed for meta-numa-nodes?

* use topology_allocator for real, including in strdup
  + add topo_set_allocator() to be called before _init()

* conversion between cpuset and an array of highest levels covering exactly it
  int topo_mask_to_levels(topo_cpuset_t *cpuset, topo_level_t *levels, int max)
* cache or node specific functions?
  + get nodes covering a cpuset?
  + get shared caches covering a cpuset?

* topo_set_cpubind(pid, ...) which type for pid?
* expose the internal conversion from cpuset to sched_setaffinity mask?
  + reverse routine?
* topo_set_membind()
  + reverse routine?
  + no level = empty mask, and we may want an easy alias for "whole machine"

Binding tool for OAR, MPI, Hydra, MPI+OpenMP:
* topo_taskset --ncpus 2 --near 3
  bind process on 2 cores near physical proc id 3
* topo_taskset --index 4
  bind process on 4th processor in a topology-aware numbering
* topo_taskset --ncpus 2 --index 4
  bind process on the 4th set of 2 physically close ids in a topology-aware numbering (used by ggrun when launching 4 process with 2 threads)
* tools to create masks and bind using them
